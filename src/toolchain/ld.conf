#include <base/Config.h>

#if defined(__x86_64__)
OUTPUT_FORMAT("elf64-x86-64")
#elif defined(__arm__)
OUTPUT_FORMAT("elf32-littlearm")
#else
OUTPUT_FORMAT("elf64-littleriscv")
#endif

ENTRY(_start)

PHDRS
{
    text    PT_LOAD;
    data    PT_LOAD;
    bss     PT_LOAD;
#if defined(__arm__) && defined(__isr__)
    vectors PT_LOAD AT(0x0) FLAGS(0x7);
#endif
    tls     PT_TLS;
}

SECTIONS
{
#if defined(__arm__) && defined(__isr__)
    .vectors :
    {
        /* generate vector table */
        LONG(0xEA000000 | (isr_0 - (8 + 4 * 0) >> 2));
        LONG(0xEA000000 | (isr_1 - (8 + 4 * 1) >> 2));
        LONG(0xEA000000 | (isr_2 - (8 + 4 * 2) >> 2));
        LONG(0xEA000000 | (isr_3 - (8 + 4 * 3) >> 2));
        LONG(0xEA000000 | (isr_4 - (8 + 4 * 4) >> 2));
        LONG(0xE320F000);  /* nop */
        LONG(0xEA000000 | (isr_6 - (8 + 4 * 6) >> 2));
        LONG(0xEA000000 | (isr_7 - (8 + 4 * 7) >> 2));
    } : vectors = 0xE320F000
#endif

    . = TILEMUX_CODE_START;

    .text :
    {
        PROVIDE(_text_start = .);
        KEEP (*(SORT_NONE(.init)))
        *(.text*)
        *(.ARM.extab.text*)

#if defined(__isr__)
        . = ALIGN(0x1000);
        PROVIDE(_user_start = .);
        *(.user_text)
        PROVIDE(_user_end = .);
        . = ALIGN(0x1000);
#endif
    } : text

    /* ensure that the coverage info is before _text_end */
    __llvm_prf_names : {} : text

    .rodata :
    {
        *(.rodata*)
        *(.srodata*)
        *(.sdata2 .sdata2.* .gnu.linkonce.s2.*)
        KEEP (*(SORT_NONE(.fini)))
#if !defined(__arm__)
        PROVIDE(_text_end = .);
#endif
    } : text

#if defined(__arm__)
    .ARM.exidx :
    {
        __exidx_start = .;
        *(.ARM.exidx* .gnu.linkonce.armexidx.*)
        __exidx_end = .;
        PROVIDE(_text_end = .);
    } : text
#endif

    .data ALIGN(0x1000) :
    {
        PROVIDE(_data_start = .);
        *(.data)
        *(.data.*)
        *(.sdata .sdata.* .sdata2.* .gnu.linkonce.s.*)
        *(.got.plt*)
        *(.got)
    } : data

    .eh_frame :
    {
        KEEP (*(.eh_frame))
        *(.eh_frame.*)
        // this is required for RISC-V (at least) to ensure that it finds the end of the frames
        LONG (0);
    } : data
    .gnu_extab          : { *(.gnu_extab) } : data
    .gcc_except_table   : { *(.gcc_except_table .gcc_except_table.*) } : data

    .ctors :
    {
        CTORS_BEGIN = .;
        KEEP (*(SORT_BY_INIT_PRIORITY(.init_array.*) SORT_BY_INIT_PRIORITY(.ctors.*)))
        KEEP (*(.init_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .ctors))
        CTORS_END = .;
#if defined(__x86_64__)
        // make do_global_ctors_aux not call any constructor; we'll do that ourself
        QUAD (-1);
#endif
        PROVIDE(_data_end = .);
    } : data

    .bss ALIGN(0x1000) :
    {
        PROVIDE(_bss_start = .);
#if defined(__isr__) || defined(__baremetal__) || defined(__tilemux__)
        . = . + 1; . = ALIGN(STACK_SIZE);
#   if defined(__isr__)
        . = . + 1; . = ALIGN(STACK_SIZE);
        PROVIDE(isr_stack = .);
#   endif
#   if defined(__baremetal__) || defined(__tilemux__)
        . = . + 1; . = ALIGN(STACK_SIZE);
        PROVIDE(baremetal_stack = .);
#   endif
#endif
        *(COMMON*)
        *(.bss*)
        *(.sbss .sbss.* .gnu.linkonce.sb.*)
        PROVIDE(_bss_end = .);
    } : bss

    /* Thread Local Storage sections  */
    .tdata :
    {
        PROVIDE_HIDDEN (_tdata_start = .);
        *(.tdata .tdata.* .gnu.linkonce.td.*)
    } : tls
    .tbss :
    {
        *(.tbss .tbss.* .gnu.linkonce.tb.*) *(.tcommon)
        PROVIDE_HIDDEN (_tdata_end = .);
    } : tls
}
